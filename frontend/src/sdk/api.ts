/* tslint:disable */
/* eslint-disable */
/**
 * Svatba Jany a Martina
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
import { ConfigurationParameters as SDKConfiguration, defaultConfigurationParameters } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	serializeDataIfNeeded,
	setBasicAuthToObject,
	setSearchParams,
	toPathString,
} from "./common";
// @ts-ignore
import { BaseAPI, RequiredError } from "./base";

export type { ConfigurationParameters as SDKConfiguration } from "./configuration";

export class SDK {
	AdminApi: SDK.AdminApi;
	EmailsApi: SDK.EmailsApi;
	NotificationsApi: SDK.NotificationsApi;
	RSVPApi: SDK.RSVPApi;
	SubscriptionsApi: SDK.SubscriptionsApi;

	constructor(configurationParams: SDKConfiguration, axios?: AxiosInstance) {
		const configuration = Object.assign({}, defaultConfigurationParameters, configurationParams);

		if (!axios) axios = globalAxios.create();

		this.AdminApi = new SDK.AdminApi(configuration, axios!);
		this.EmailsApi = new SDK.EmailsApi(configuration, axios!);
		this.NotificationsApi = new SDK.NotificationsApi(configuration, axios!);
		this.RSVPApi = new SDK.RSVPApi(configuration, axios!);
		this.SubscriptionsApi = new SDK.SubscriptionsApi(configuration, axios!);
	}
}

export namespace SDK {
	/**
	 *
	 * @export
	 * @interface CreateRsvpBodyDto
	 */
	export interface CreateRsvpBodyDto {
		/**
		 *
		 * @type {string}
		 * @memberof CreateRsvpBodyDto
		 */
		name?: string;
		/**
		 *
		 * @type {string}
		 * @memberof CreateRsvpBodyDto
		 */
		inviteId?: string;
		/**
		 *
		 * @type {string}
		 * @memberof CreateRsvpBodyDto
		 */
		partner?: string;
		/**
		 *
		 * @type {string}
		 * @memberof CreateRsvpBodyDto
		 */
		children?: string;
		/**
		 *
		 * @type {Array<string>}
		 * @memberof CreateRsvpBodyDto
		 */
		subscriptions?: Array<string>;
	}

	/**
	 *
	 * @export
	 * @interface ListNotificationsResponseDto
	 */
	export interface ListNotificationsResponseDto {
		/**
		 *
		 * @type {string}
		 * @memberof ListNotificationsResponseDto
		 */
		id: string;
		/**
		 *
		 * @type {string}
		 * @memberof ListNotificationsResponseDto
		 */
		message?: string;
		/**
		 *
		 * @type {string}
		 * @memberof ListNotificationsResponseDto
		 */
		createdAt?: string;
		/**
		 *
		 * @type {boolean}
		 * @memberof ListNotificationsResponseDto
		 */
		test?: boolean;
		/**
		 *
		 * @type {string}
		 * @memberof ListNotificationsResponseDto
		 */
		buttonTitle?: string;
		/**
		 *
		 * @type {string}
		 * @memberof ListNotificationsResponseDto
		 */
		buttonLink?: string;
	}

	/**
	 *
	 * @export
	 * @interface PushSubscriptionDto
	 */
	export interface PushSubscriptionDto {
		/**
		 *
		 * @type {string}
		 * @memberof PushSubscriptionDto
		 */
		endpoint: string;
		/**
		 *
		 * @type {number}
		 * @memberof PushSubscriptionDto
		 */
		expirationTime?: number | null;
		/**
		 *
		 * @type {PushSubscriptionDtoKeys}
		 * @memberof PushSubscriptionDto
		 */
		keys: PushSubscriptionDtoKeys;
	}

	/**
	 *
	 * @export
	 * @interface PushSubscriptionDtoKeys
	 */
	export interface PushSubscriptionDtoKeys {
		/**
		 *
		 * @type {string}
		 * @memberof PushSubscriptionDtoKeys
		 */
		p256dh: string;
		/**
		 *
		 * @type {string}
		 * @memberof PushSubscriptionDtoKeys
		 */
		auth: string;
	}

	/**
	 *
	 * @export
	 * @interface RsvpResponseDto
	 */
	export interface RsvpResponseDto {
		/**
		 *
		 * @type {string}
		 * @memberof RsvpResponseDto
		 */
		id: string;
		/**
		 *
		 * @type {string}
		 * @memberof RsvpResponseDto
		 */
		name?: string;
		/**
		 *
		 * @type {string}
		 * @memberof RsvpResponseDto
		 */
		inviteId?: string;
		/**
		 *
		 * @type {string}
		 * @memberof RsvpResponseDto
		 */
		partner?: string;
		/**
		 *
		 * @type {string}
		 * @memberof RsvpResponseDto
		 */
		children?: string;
		/**
		 *
		 * @type {Array<string>}
		 * @memberof RsvpResponseDto
		 */
		subscriptions?: Array<string>;
		/**
		 *
		 * @type {string}
		 * @memberof RsvpResponseDto
		 */
		createdAt: string;
	}

	/**
	 *
	 * @export
	 * @interface SaveEmailDto
	 */
	export interface SaveEmailDto {
		/**
		 *
		 * @type {string}
		 * @memberof SaveEmailDto
		 */
		email: string;
	}

	/**
	 *
	 * @export
	 * @interface SendNotificationBodyDto
	 */
	export interface SendNotificationBodyDto {
		/**
		 *
		 * @type {string}
		 * @memberof SendNotificationBodyDto
		 */
		message: string;
		/**
		 *
		 * @type {string}
		 * @memberof SendNotificationBodyDto
		 */
		buttonTitle?: string;
		/**
		 *
		 * @type {string}
		 * @memberof SendNotificationBodyDto
		 */
		buttonLink?: string;
		/**
		 *
		 * @type {string}
		 * @memberof SendNotificationBodyDto
		 */
		test?: SendNotificationBodyDtoTestEnum;
	}

	export const SendNotificationBodyDtoTestEnum = {
		True: "true",
		False: "false",
	} as const;

	export type SendNotificationBodyDtoTestEnum =
		(typeof SendNotificationBodyDtoTestEnum)[keyof typeof SendNotificationBodyDtoTestEnum];

	/**
	 *
	 * @export
	 * @interface SubscriptionResponseDto
	 */
	export interface SubscriptionResponseDto {
		/**
		 *
		 * @type {string}
		 * @memberof SubscriptionResponseDto
		 */
		id: string;
		/**
		 *
		 * @type {string}
		 * @memberof SubscriptionResponseDto
		 */
		endpoint?: string;
		/**
		 *
		 * @type {string}
		 * @memberof SubscriptionResponseDto
		 */
		rsvpId?: string;
	}

	/**
	 *
	 * @export
	 * @interface UpdateRsvpBodyDto
	 */
	export interface UpdateRsvpBodyDto {
		/**
		 *
		 * @type {string}
		 * @memberof UpdateRsvpBodyDto
		 */
		name?: string;
		/**
		 *
		 * @type {string}
		 * @memberof UpdateRsvpBodyDto
		 */
		inviteId?: string;
		/**
		 *
		 * @type {string}
		 * @memberof UpdateRsvpBodyDto
		 */
		partner?: string;
		/**
		 *
		 * @type {string}
		 * @memberof UpdateRsvpBodyDto
		 */
		children?: string;
		/**
		 *
		 * @type {Array<string>}
		 * @memberof UpdateRsvpBodyDto
		 */
		subscriptions?: Array<string>;
	}

	/**
	 * AdminApi - object-oriented interface
	 * @export
	 * @class AdminApi
	 * @extends {BaseAPI}
	 */
	export class AdminApi extends BaseAPI {
		constructor(
			protected override configuration: SDKConfiguration,
			protected override axios: AxiosInstance = globalAxios,
		) {
			super(configuration, configuration.basePath, axios);
		}

		/**
         * 
    
         * @param {AxiosRequestConfig} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof AdminApi
         */

		public async refresh(options: AxiosRequestConfig = {}) {
			const localVarPath = `/api/admin/refresh`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (this.configuration) {
				baseOptions = this.configuration.baseOptions;
			}

			const axiosRequestConfig: AxiosRequestConfig = { method: "GET", ...baseOptions, ...options };
			const requestHeaderParameter = {} as any;
			const requestQueryParameter = {} as any;

			// authentication basic-auth required
			// http basic authentication required
			setBasicAuthToObject(axiosRequestConfig, this.configuration);

			setSearchParams(requestUrlObj, requestQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			axiosRequestConfig.headers = { ...requestHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			axiosRequestConfig["url"] = toPathString(requestUrlObj);
			axiosRequestConfig["baseURL"] = this.configuration.basePath;

			return this.axios.request<void>(axiosRequestConfig);
		}
	}

	/**
	 * EmailsApi - object-oriented interface
	 * @export
	 * @class EmailsApi
	 * @extends {BaseAPI}
	 */
	export class EmailsApi extends BaseAPI {
		constructor(
			protected override configuration: SDKConfiguration,
			protected override axios: AxiosInstance = globalAxios,
		) {
			super(configuration, configuration.basePath, axios);
		}

		/**
         * 
    
         * @param {AxiosRequestConfig} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof EmailsApi
         */

		public async saveEmail(body: SaveEmailDto, options: AxiosRequestConfig = {}) {
			// verify required parameter 'saveEmailDto' is not null or undefined
			assertParamExists("saveEmail", "saveEmailDto", body);

			const localVarPath = `/api/emails`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (this.configuration) {
				baseOptions = this.configuration.baseOptions;
			}

			const axiosRequestConfig: AxiosRequestConfig = { method: "POST", ...baseOptions, ...options };
			const requestHeaderParameter = {} as any;
			const requestQueryParameter = {} as any;

			requestHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(requestUrlObj, requestQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			axiosRequestConfig.headers = { ...requestHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			axiosRequestConfig.data = serializeDataIfNeeded(body, axiosRequestConfig, this.configuration);

			axiosRequestConfig["url"] = toPathString(requestUrlObj);
			axiosRequestConfig["baseURL"] = this.configuration.basePath;

			return this.axios.request<void>(axiosRequestConfig);
		}
	}

	/**
	 * Query parameters for listNotifications operation in NotificationsApi.
	 * @export
	 * @interface NotificationsApiListNotificationsQueryParams
	 */
	export interface NotificationsApiListNotificationsQueryParams {
		//includeTest
		/**
		 *
		 * @type {boolean}
		 * @memberof NotificationsApiListNotifications
		 */
		includeTest?: boolean;
	}

	/**
	 * NotificationsApi - object-oriented interface
	 * @export
	 * @class NotificationsApi
	 * @extends {BaseAPI}
	 */
	export class NotificationsApi extends BaseAPI {
		constructor(
			protected override configuration: SDKConfiguration,
			protected override axios: AxiosInstance = globalAxios,
		) {
			super(configuration, configuration.basePath, axios);
		}

		/**
         * 
    
         * @param {NotificationsApiListNotificationsQueryParams} queryParams Query parameters.
         * @param {AxiosRequestConfig} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof NotificationsApi
         */

		public async listNotifications(
			queryParams: NotificationsApiListNotificationsQueryParams = {},
			options: AxiosRequestConfig = {},
		) {
			const localVarPath = `/api/notifications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (this.configuration) {
				baseOptions = this.configuration.baseOptions;
			}

			const axiosRequestConfig: AxiosRequestConfig = { method: "GET", ...baseOptions, ...options };
			const requestHeaderParameter = {} as any;
			const requestQueryParameter = {} as any;

			if (queryParams.includeTest !== undefined) {
				requestQueryParameter["includeTest"] = queryParams.includeTest;
			}

			setSearchParams(requestUrlObj, requestQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			axiosRequestConfig.headers = { ...requestHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			axiosRequestConfig["url"] = toPathString(requestUrlObj);
			axiosRequestConfig["baseURL"] = this.configuration.basePath;

			return this.axios.request<Array<ListNotificationsResponseDto>>(axiosRequestConfig);
		}

		/**
         * 
    
         * @param {AxiosRequestConfig} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof NotificationsApi
         */

		public async sendNotification(body: SendNotificationBodyDto, options: AxiosRequestConfig = {}) {
			// verify required parameter 'sendNotificationBodyDto' is not null or undefined
			assertParamExists("sendNotification", "sendNotificationBodyDto", body);

			const localVarPath = `/api/notifications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (this.configuration) {
				baseOptions = this.configuration.baseOptions;
			}

			const axiosRequestConfig: AxiosRequestConfig = { method: "POST", ...baseOptions, ...options };
			const requestHeaderParameter = {} as any;
			const requestQueryParameter = {} as any;

			// authentication basic-auth required
			// http basic authentication required
			setBasicAuthToObject(axiosRequestConfig, this.configuration);

			requestHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(requestUrlObj, requestQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			axiosRequestConfig.headers = { ...requestHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			axiosRequestConfig.data = serializeDataIfNeeded(body, axiosRequestConfig, this.configuration);

			axiosRequestConfig["url"] = toPathString(requestUrlObj);
			axiosRequestConfig["baseURL"] = this.configuration.basePath;

			return this.axios.request<void>(axiosRequestConfig);
		}
	}

	/**
	 * Query parameters for searchRsvp operation in RSVPApi.
	 * @export
	 * @interface RSVPApiSearchRsvpQueryParams
	 */
	export interface RSVPApiSearchRsvpQueryParams {
		//inviteId
		/**
		 *
		 * @type {string}
		 * @memberof RSVPApiSearchRsvp
		 */
		inviteId?: string;

		//subscriptionId
		/**
		 *
		 * @type {Array<string>}
		 * @memberof RSVPApiSearchRsvp
		 */
		subscriptionId?: Array<string>;
	}

	/**
	 * RSVPApi - object-oriented interface
	 * @export
	 * @class RSVPApi
	 * @extends {BaseAPI}
	 */
	export class RSVPApi extends BaseAPI {
		constructor(
			protected override configuration: SDKConfiguration,
			protected override axios: AxiosInstance = globalAxios,
		) {
			super(configuration, configuration.basePath, axios);
		}

		/**
         * 
    
         * @param {AxiosRequestConfig} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RSVPApi
         */

		public async createRsvp(body: CreateRsvpBodyDto, options: AxiosRequestConfig = {}) {
			// verify required parameter 'createRsvpBodyDto' is not null or undefined
			assertParamExists("createRsvp", "createRsvpBodyDto", body);

			const localVarPath = `/api/rsvp`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (this.configuration) {
				baseOptions = this.configuration.baseOptions;
			}

			const axiosRequestConfig: AxiosRequestConfig = { method: "POST", ...baseOptions, ...options };
			const requestHeaderParameter = {} as any;
			const requestQueryParameter = {} as any;

			requestHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(requestUrlObj, requestQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			axiosRequestConfig.headers = { ...requestHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			axiosRequestConfig.data = serializeDataIfNeeded(body, axiosRequestConfig, this.configuration);

			axiosRequestConfig["url"] = toPathString(requestUrlObj);
			axiosRequestConfig["baseURL"] = this.configuration.basePath;

			return this.axios.request<RsvpResponseDto>(axiosRequestConfig);
		}

		/**
         * 
    
         * @param {string} rsvpId 
         * @param {AxiosRequestConfig} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RSVPApi
         */

		public async getRsvp(rsvpId: string, options: AxiosRequestConfig = {}) {
			// verify required parameter 'rsvpId' is not null or undefined
			assertParamExists("getRsvp", "rsvpId", rsvpId);

			const localVarPath = `/api/rsvp/{rsvpId}`.replace(`{${"rsvpId"}}`, encodeURIComponent(String(rsvpId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (this.configuration) {
				baseOptions = this.configuration.baseOptions;
			}

			const axiosRequestConfig: AxiosRequestConfig = { method: "GET", ...baseOptions, ...options };
			const requestHeaderParameter = {} as any;
			const requestQueryParameter = {} as any;

			setSearchParams(requestUrlObj, requestQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			axiosRequestConfig.headers = { ...requestHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			axiosRequestConfig["url"] = toPathString(requestUrlObj);
			axiosRequestConfig["baseURL"] = this.configuration.basePath;

			return this.axios.request<RsvpResponseDto>(axiosRequestConfig);
		}

		/**
         * 
    
         * @param {RSVPApiSearchRsvpQueryParams} queryParams Query parameters.
         * @param {AxiosRequestConfig} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RSVPApi
         */

		public async searchRsvp(queryParams: RSVPApiSearchRsvpQueryParams = {}, options: AxiosRequestConfig = {}) {
			const localVarPath = `/api/rsvp/search`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (this.configuration) {
				baseOptions = this.configuration.baseOptions;
			}

			const axiosRequestConfig: AxiosRequestConfig = { method: "POST", ...baseOptions, ...options };
			const requestHeaderParameter = {} as any;
			const requestQueryParameter = {} as any;

			if (queryParams.inviteId !== undefined) {
				requestQueryParameter["inviteId"] = queryParams.inviteId;
			}

			if (queryParams.subscriptionId) {
				requestQueryParameter["subscriptionId"] = queryParams.subscriptionId;
			}

			setSearchParams(requestUrlObj, requestQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			axiosRequestConfig.headers = { ...requestHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			axiosRequestConfig["url"] = toPathString(requestUrlObj);
			axiosRequestConfig["baseURL"] = this.configuration.basePath;

			return this.axios.request<RsvpResponseDto>(axiosRequestConfig);
		}

		/**
         * 
    
         * @param {string} rsvpId 
         * @param {AxiosRequestConfig} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof RSVPApi
         */

		public async updateRsvp(rsvpId: string, body: UpdateRsvpBodyDto, options: AxiosRequestConfig = {}) {
			// verify required parameter 'rsvpId' is not null or undefined
			assertParamExists("updateRsvp", "rsvpId", rsvpId);
			assertParamExists("updateRsvp", "updateRsvpBodyDto", body);

			// verify required parameter 'updateRsvpBodyDto' is not null or undefined
			assertParamExists("updateRsvp", "rsvpId", rsvpId);
			assertParamExists("updateRsvp", "updateRsvpBodyDto", body);

			const localVarPath = `/api/rsvp/{rsvpId}`.replace(`{${"rsvpId"}}`, encodeURIComponent(String(rsvpId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (this.configuration) {
				baseOptions = this.configuration.baseOptions;
			}

			const axiosRequestConfig: AxiosRequestConfig = { method: "PATCH", ...baseOptions, ...options };
			const requestHeaderParameter = {} as any;
			const requestQueryParameter = {} as any;

			requestHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(requestUrlObj, requestQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			axiosRequestConfig.headers = { ...requestHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			axiosRequestConfig.data = serializeDataIfNeeded(body, axiosRequestConfig, this.configuration);

			axiosRequestConfig["url"] = toPathString(requestUrlObj);
			axiosRequestConfig["baseURL"] = this.configuration.basePath;

			return this.axios.request<RsvpResponseDto>(axiosRequestConfig);
		}
	}

	/**
	 * SubscriptionsApi - object-oriented interface
	 * @export
	 * @class SubscriptionsApi
	 * @extends {BaseAPI}
	 */
	export class SubscriptionsApi extends BaseAPI {
		constructor(
			protected override configuration: SDKConfiguration,
			protected override axios: AxiosInstance = globalAxios,
		) {
			super(configuration, configuration.basePath, axios);
		}

		/**
         * 
    
         * @param {AxiosRequestConfig} [options] Override http request option.
         * @throws {RequiredError}
         * @memberof SubscriptionsApi
         */

		public async saveSubscription(body: PushSubscriptionDto, options: AxiosRequestConfig = {}) {
			// verify required parameter 'pushSubscriptionDto' is not null or undefined
			assertParamExists("saveSubscription", "pushSubscriptionDto", body);

			const localVarPath = `/api/subscriptions`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const requestUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (this.configuration) {
				baseOptions = this.configuration.baseOptions;
			}

			const axiosRequestConfig: AxiosRequestConfig = { method: "POST", ...baseOptions, ...options };
			const requestHeaderParameter = {} as any;
			const requestQueryParameter = {} as any;

			requestHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(requestUrlObj, requestQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			axiosRequestConfig.headers = { ...requestHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			axiosRequestConfig.data = serializeDataIfNeeded(body, axiosRequestConfig, this.configuration);

			axiosRequestConfig["url"] = toPathString(requestUrlObj);
			axiosRequestConfig["baseURL"] = this.configuration.basePath;

			return this.axios.request<SubscriptionResponseDto>(axiosRequestConfig);
		}
	}
}
